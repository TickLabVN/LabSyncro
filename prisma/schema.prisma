generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id          BigInt       @id @default(autoincrement())
  createdAt   DateTime     @default(now()) @map("created_at") @db.Timestamptz(6)
  name        String
  quantity    BigInt?
  deviceKinds DeviceKind[]

  @@map("categories")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model DeviceKind {
  category    Category? @relation(fields: [category_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  category_id BigInt?

  createdAt                                           DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  name                                                String?
  meta                                                Json
  image                                               Json?
  brand                                               String?
  manufacturer                                        String?
  description                                         String?
  datasheet                                           String?
  unit                                                String?
  price                                               String?
  deleted_at                                          DateTime? @db.Timestamptz(6)
  id                                                  String    @id @unique(map: "device_kinds_id__key") @default(dbgenerated("lpad(to_hex(nextval('seq_device_kind_count'::regclass)), 8, '0'::text)"))
  allowed_borrow_roles                                String[]
  allowed_view_roles                                  String[]
  is_borrowable_lab_only                              Boolean   @default(false)
  devices_devices_accessory_for_kind_idTodevice_kinds Device[]  @relation("devices_accessory_for_kind_idTodevice_kinds")
  devices_devices_kindTodevice_kinds                  Device[]  @relation("devices_kindTodevice_kinds")

  @@map("device_kinds")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model Device {
  created_at                                               DateTime                    @default(now()) @db.Timestamptz(6)
  kind                                                     String
  lab_id                                                   String?                     @db.Uuid
  deleted_at                                               DateTime?                   @db.Timestamptz(6)
  status                                                   DeviceStatus                @default(healthy)
  id                                                       String                      @id @unique(map: "devices_id__key") @default(dbgenerated("to_hex(nextval('seq_devices_id'::regclass))"))
  full_id                                                  String                      @unique @default(dbgenerated("((kind || '/'::text) || id)"))
  printed_at                                               DateTime?                   @db.Timestamptz(6)
  accessory_for_kind_id                                    String?
  device_kinds_devices_accessory_for_kind_idTodevice_kinds DeviceKind?                 @relation("devices_accessory_for_kind_idTodevice_kinds", fields: [accessory_for_kind_id], references: [id])
  device_kinds_devices_kindTodevice_kinds                  DeviceKind                  @relation("devices_kindTodevice_kinds", fields: [kind], references: [id])
  labs                                                     Lab?                        @relation(fields: [lab_id], references: [id])
  inventory_assessments_devices                            InventoryAssessmentDevice[]
  maintenances_devices                                     MaintenanceDevice[]
  receipts_devices                                         ReceiptDevice[]
  shipments_devices                                        ShipmentDevice[]

  @@index([id, deleted_at], map: "idx_devices_id_deleted")
  @@index([id, lab_id], map: "idx_devices_id_lab_id")
  @@index([kind, deleted_at], map: "idx_devices_kind")
  @@map("devices")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model HMICode {
  code       BigInt    @id @default(autoincrement())
  created_at DateTime  @default(now()) @db.Timestamptz(6)
  user_id    String?
  auth_token String?
  status     String    @default("pending")
  updated_at DateTime? @default(now()) @db.Timestamptz(6)
  expires_at DateTime? @db.Timestamptz(6)
  lab_id     String?   @db.Uuid
  labs       Lab?      @relation(fields: [lab_id], references: [id])
  users      User?     @relation(fields: [user_id], references: [id])

  @@map("hmi_codes")
}

model InventoryAssessment {
  id                            String                      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  finished_at                   DateTime?                   @db.Timestamptz(6)
  lab_id                        String                      @db.Uuid
  accountant_id                 String?
  status                        AssessmentStatus
  users                         User?                       @relation(fields: [accountant_id], references: [id], onDelete: Restrict)
  labs                          Lab                         @relation(fields: [lab_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  inventory_assessments_devices InventoryAssessmentDevice[]

  @@map("inventory_assessments")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model InventoryAssessmentDevice {
  id                    String               @id(map: "inventory_asessments_devices_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  prev_status           DeviceStatus?
  after_status          DeviceStatus?
  assessing_id          String?              @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  device_id             String?
  inventory_assessments InventoryAssessment? @relation(fields: [assessing_id], references: [id], map: "inventory_asessments_devices_assessing_id_fkey")
  devices               Device?              @relation(fields: [device_id], references: [id], map: "inventory_asessments_devices_device_id_fkey")

  @@map("inventory_assessments_devices")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model Lab {
  id                                      String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at                              DateTime              @default(now()) @db.Timestamptz(6)
  name                                    String?
  faculty                                 String?
  room                                    String?
  branch                                  String?
  timetable                               Json
  admin_id                                String?
  deleted_at                              DateTime?             @db.Timestamptz(6)
  devices                                 Device[]
  hmi_codes                               HMICode[]
  inventory_assessments                   InventoryAssessment[]
  users                                   User?                 @relation(fields: [admin_id], references: [id], onDelete: Restrict)
  maintenances                            Maintenance[]
  receipts                                Receipt[]
  receipts_devices                        ReceiptDevice[]
  shipments_shipments_arrive_lab_idTolabs Shipment[]            @relation("shipments_arrive_lab_idTolabs")
  shipments_shipments_start_lab_idTolabs  Shipment[]            @relation("shipments_start_lab_idTolabs")

  @@map("labs")
}

model Maintenance {
  id                   String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  status               MaintenanceStatus
  maintainer_id        String?
  finished_at          DateTime?           @db.Timestamptz(6)
  lab_id               String              @db.Uuid
  labs                 Lab                 @relation(fields: [lab_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users                User?               @relation(fields: [maintainer_id], references: [id], onDelete: Restrict)
  maintenances_devices MaintenanceDevice[]

  @@map("maintenances")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model MaintenanceDevice {
  id             String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  prev_status    DeviceStatus?
  after_status   DeviceStatus?
  maintaining_id String        @db.Uuid
  device_id      String?
  devices        Device?       @relation(fields: [device_id], references: [id])
  maintenance    Maintenance   @relation(fields: [maintaining_id], references: [id])

  @@map("maintenances_devices")
}

model Receipt {
  id            String          @id
  actor_id      String
  checker_id    String
  lab_id        String          @db.Uuid
  labs          Lab             @relation(fields: [lab_id], references: [id])
  ReceiptDevice ReceiptDevice[]
  userId        String?
  User          User?           @relation(fields: [userId], references: [id])

  @@map("receipts")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model ReceiptDevice {
  borrowed_receipt_id      String
  device_id                String
  prev_quality             DeviceStatus?
  borrow_id                String?       @db.Uuid
  return_id                String?       @db.Uuid
  expected_returned_at     DateTime      @db.Timestamptz(6)
  id                       String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  expected_returned_lab_id String?       @db.Uuid
  after_quality            DeviceStatus?
  returned_receipt_id      String?
  devices                  Device        @relation(fields: [device_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  labs                     Lab?          @relation(fields: [expected_returned_lab_id], references: [id])
  Receipt                  Receipt?      @relation(fields: [receiptId], references: [id])
  receiptId                String?

  @@map("receipts_devices")
}

model Shipment {
  id                                 String           @id
  sender_id                          String?
  receiver_id                        String?
  status                             ShipmentStatus
  start_lab_id                       String           @db.Uuid
  arrive_lab_id                      String           @db.Uuid
  from_at                            String?          @db.Uuid
  to_at                              String?          @db.Uuid
  check_at_destination               Boolean?         @default(false)
  labs_shipments_arrive_lab_idTolabs Lab              @relation("shipments_arrive_lab_idTolabs", fields: [arrive_lab_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users_shipments_receiver_idTousers User?            @relation("shipments_receiver_idTousers", fields: [receiver_id], references: [id], onDelete: Restrict)
  users_shipments_sender_idTousers   User?            @relation("shipments_sender_idTousers", fields: [sender_id], references: [id], onDelete: Restrict)
  labs_shipments_start_lab_idTolabs  Lab              @relation("shipments_start_lab_idTolabs", fields: [start_lab_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  shipments_devices                  ShipmentDevice[]

  @@map("shipments")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model ShipmentDevice {
  id           String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  prev_status  DeviceStatus?
  after_status DeviceStatus?
  shipment_id  String
  device_id    String?
  devices      Device?       @relation(fields: [device_id], references: [id])
  shipments    Shipment      @relation(fields: [shipment_id], references: [id])

  @@map("shipments_devices")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model UsedQRTokens {
  id        BigInt   @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  token     String
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id])

  @@unique([token, userId])
  @@map("used_qr_tokens")
}

model User {
  id       String     @id(map: "user_pkey")
  name     String
  meta     Json
  email    String?    @unique
  password String?
  avatar   String?
  tel      String?
  roles    UserRole[]

  hmiCodes                               HMICode[]
  assessments                            InventoryAssessment[]
  labs                                   Lab[]
  maintenances                           Maintenance[]
  shipments_shipments_receiver_idTousers Shipment[]            @relation("shipments_receiver_idTousers")
  shipments_shipments_sender_idTousers   Shipment[]            @relation("shipments_sender_idTousers")
  usedQrTokens                           UsedQRTokens[]
  receipts                               Receipt[]

  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  deletedAt    DateTime? @map("deleted_at")
  lastActiveAt DateTime? @map("last_activate_at")

  @@map("users")
}

enum UserRole {
  SYSTEM_ADMIN
  LAB_ADMIN
  COLLABORATOR
  TEACHER
  STUDENT
}

enum AssessmentStatus {
  assessing
  completed
  cancelled

  @@map("assessment_status")
}

enum DeviceStatus {
  healthy
  broken
  discarded
  assessing
  maintaining
  shipping
  borrowing
  lost

  @@map("device_status")
}

enum MaintenanceStatus {
  maintaining
  completed
  cancelled

  @@map("maintenance_status")
}

enum RequestStatus {
  pending
  approved
  rejected
  cancelled

  @@map("request_status")
}

enum ReservationStatus {
  pending
  approved
  ready
  cancelled

  @@map("reservation_status")
}

enum ShipmentStatus {
  shipping
  completed
  cancelled

  @@map("shipment_status")
}
