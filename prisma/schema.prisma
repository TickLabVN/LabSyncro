generator client {
  provider = "prisma-client"
  output   = "../server/datasources/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id          Int          @id @default(autoincrement())
  createdAt   DateTime     @default(now()) @map("created_at")
  name        String
  quantity    BigInt?
  deviceKinds DeviceKind[]

  @@map("categories")
}

model Image {
  id              String            @id @default(cuid()) @db.VarChar(256)
  name            String            @db.VarChar(255)
  extension       String            @db.VarChar(10)
  mimeType        String            @map("mime_type") @db.VarChar(255)
  createdAt       DateTime          @default(now()) @map("created_at")
  uploadedAt      DateTime?         @map("uploaded_at")
  DeviceKindImage DeviceKindImage[]

  @@map("images")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model DeviceKind {
  category   Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  categoryId Int?      @map("category_id")

  id                    String            @id @unique @default(cuid())
  createdAt             DateTime          @default(now()) @map("created_at")
  borrowType            BorrowType        @default(HOME_ALLOWED) @map("borrow_type")
  requiredBorrowerRoles UserRole[]        @default([]) @map("required_borrower_roles")
  name                  String
  meta                  Json
  images                DeviceKindImage[]
  brand                 String?
  manufacturer          String?
  description           String?
  unit                  String?
  price                 Float?            @db.DoublePrecision
  deletedAt             DateTime?         @map("deleted_at")
  devices               Device[]

  @@map("device_kinds")
}

enum BorrowType {
  LAB_ONLY
  HOME_ALLOWED
}

model Device {
  deviceKindId   String     @map("device_kind_id")
  deviceKind     DeviceKind @relation(fields: [deviceKindId], references: [id])
  lab            Lab?       @relation(fields: [labId], references: [id])
  labId          String?    @map("lab_id")
  parentDevice   Device?    @relation("ParentDevice", fields: [parentDeviceId], references: [id])
  parentDeviceId String?    @map("parent_device_id")

  id        String       @id @default(cuid())
  status    DeviceStatus @default(HEALTHY)
  printedAt DateTime?    @map("printed_at")

  childDevices Device[]                    @relation("ParentDevice")
  assessments  InventoryAssessmentDevice[]
  maintenances MaintenanceDevice[]
  receipts     ReceiptDevice[]
  shipments    ShipmentDevice[]

  createdAt DateTime  @default(now()) @map("created_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("devices")
}

enum ImageType {
  COVER
  GALLERY
  ATTACHMENT
}

model DeviceKindImage {
  deviceKindId String     @map("device_kind_id")
  deviceKind   DeviceKind @relation(fields: [deviceKindId], references: [id], onDelete: Cascade)
  image        Image      @relation(fields: [imageId], references: [id], onDelete: Cascade)
  imageId      String     @map("image_id")
  type         ImageType

  @@id([deviceKindId, imageId])
}

model HMICode {
  code       BigInt    @id @default(autoincrement())
  created_at DateTime  @default(now())
  user_id    String?
  auth_token String?
  status     String    @default("pending")
  updated_at DateTime? @default(now())
  expires_at DateTime?
  lab_id     String?   @db.Uuid
  labs       Lab?      @relation(fields: [lab_id], references: [id])
  users      User?     @relation(fields: [user_id], references: [id])

  @@map("hmi_codes")
}

model InventoryAssessment {
  id                            String                      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  finished_at                   DateTime?
  lab_id                        String                      @db.Uuid
  accountant_id                 String?
  status                        AssessmentStatus
  users                         User?                       @relation(fields: [accountant_id], references: [id], onDelete: Restrict)
  labs                          Lab                         @relation(fields: [lab_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  inventory_assessments_devices InventoryAssessmentDevice[]

  @@map("inventory_assessments")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model InventoryAssessmentDevice {
  id                    String               @id(map: "inventory_asessments_devices_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  prev_status           DeviceStatus?
  after_status          DeviceStatus?
  assessing_id          String?              @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  device_id             String?
  inventory_assessments InventoryAssessment? @relation(fields: [assessing_id], references: [id], map: "inventory_asessments_devices_assessing_id_fkey")
  devices               Device?              @relation(fields: [device_id], references: [id], map: "inventory_asessments_devices_device_id_fkey")

  @@map("inventory_assessments_devices")
}

model Lab {
  adminId String? @map("admin_id")
  admin   User?   @relation(fields: [adminId], references: [id])

  id                                      String                @id @default(cuid()) @db.VarChar(36)
  name                                    String                @db.VarChar(100)
  faculty                                 String
  room                                    String
  branch                                  String
  timetable                               Json
  devices                                 Device[]
  hmi_codes                               HMICode[]
  inventory_assessments                   InventoryAssessment[]
  maintenances                            Maintenance[]
  receipts                                Receipt[]
  receipts_devices                        ReceiptDevice[]
  shipments_shipments_arrive_lab_idTolabs Shipment[]            @relation("shipments_arrive_lab_idTolabs")
  shipments_shipments_start_lab_idTolabs  Shipment[]            @relation("shipments_start_lab_idTolabs")

  createdAt DateTime  @default(now()) @map("created_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("labs")
}

model Maintenance {
  id                   String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  status               MaintenanceStatus
  maintainer_id        String?
  finished_at          DateTime?
  lab_id               String              @db.Uuid
  labs                 Lab                 @relation(fields: [lab_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users                User?               @relation(fields: [maintainer_id], references: [id], onDelete: Restrict)
  maintenances_devices MaintenanceDevice[]

  @@map("maintenances")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model MaintenanceDevice {
  id             String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  prev_status    DeviceStatus?
  after_status   DeviceStatus?
  maintaining_id String        @db.Uuid
  device_id      String?
  devices        Device?       @relation(fields: [device_id], references: [id])
  maintenance    Maintenance   @relation(fields: [maintaining_id], references: [id])

  @@map("maintenances_devices")
}

model Receipt {
  id         String          @id
  actor_id   String
  checker_id String
  labId      String          @map("lab_id")
  labs       Lab             @relation(fields: [labId], references: [id])
  devices    ReceiptDevice[]
  userId     String?
  User       User?           @relation(fields: [userId], references: [id])

  @@map("receipts")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model ReceiptDevice {
  borrowed_receipt_id      String
  device_id                String
  prev_quality             DeviceStatus?
  borrow_id                String?       @db.Uuid
  return_id                String?       @db.Uuid
  expected_returned_at     DateTime
  id                       String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  expected_returned_lab_id String?       @db.Uuid
  after_quality            DeviceStatus?
  returned_receipt_id      String?
  devices                  Device        @relation(fields: [device_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  labs                     Lab?          @relation(fields: [expected_returned_lab_id], references: [id])
  Receipt                  Receipt?      @relation(fields: [receiptId], references: [id])
  receiptId                String?

  @@map("receipts_devices")
}

model Shipment {
  id                                 String           @id
  sender_id                          String?
  receiver_id                        String?
  status                             ShipmentStatus
  start_lab_id                       String           @db.Uuid
  arrive_lab_id                      String           @db.Uuid
  from_at                            String?          @db.Uuid
  to_at                              String?          @db.Uuid
  check_at_destination               Boolean?         @default(false)
  labs_shipments_arrive_lab_idTolabs Lab              @relation("shipments_arrive_lab_idTolabs", fields: [arrive_lab_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users_shipments_receiver_idTousers User?            @relation("shipments_receiver_idTousers", fields: [receiver_id], references: [id], onDelete: Restrict)
  users_shipments_sender_idTousers   User?            @relation("shipments_sender_idTousers", fields: [sender_id], references: [id], onDelete: Restrict)
  labs_shipments_start_lab_idTolabs  Lab              @relation("shipments_start_lab_idTolabs", fields: [start_lab_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  shipments_devices                  ShipmentDevice[]

  @@map("shipments")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model ShipmentDevice {
  id           String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  prev_status  DeviceStatus?
  after_status DeviceStatus?
  shipment_id  String
  device_id    String?
  devices      Device?       @relation(fields: [device_id], references: [id])
  shipments    Shipment      @relation(fields: [shipment_id], references: [id])

  @@map("shipments_devices")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model UsedQRTokens {
  id        BigInt   @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  token     String
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id])

  @@unique([token, userId])
  @@map("used_qr_tokens")
}

model User {
  id       String     @id(map: "user_pkey")
  name     String
  meta     Json
  email    String     @unique
  password String?
  avatar   String?
  tel      String?
  roles    UserRole[]

  hmiCodes                               HMICode[]
  assessments                            InventoryAssessment[]
  labs                                   Lab[]
  maintenances                           Maintenance[]
  shipments_shipments_receiver_idTousers Shipment[]            @relation("shipments_receiver_idTousers")
  shipments_shipments_sender_idTousers   Shipment[]            @relation("shipments_sender_idTousers")
  usedQrTokens                           UsedQRTokens[]
  receipts                               Receipt[]

  createdAt    DateTime  @default(now()) @map("created_at")
  deletedAt    DateTime? @map("deleted_at")
  lastActiveAt DateTime  @default(now()) @map("last_activate_at")

  @@map("users")
}

enum UserRole {
  SYSTEM_ADMIN
  LAB_ADMIN
  COLLABORATOR
  TEACHER
  STUDENT
}

enum AssessmentStatus {
  assessing
  completed
  cancelled

  @@map("assessment_status")
}

enum DeviceStatus {
  HEALTHY
  BROKEN
  DISCARDED
  ASSESSING
  MAINTAINING
  SHIPPING
  BORROWING
  LOST

  @@map("device_status")
}

enum MaintenanceStatus {
  maintaining
  completed
  cancelled

  @@map("maintenance_status")
}

enum RequestStatus {
  pending
  approved
  rejected
  cancelled

  @@map("request_status")
}

enum ReservationStatus {
  pending
  approved
  ready
  cancelled

  @@map("reservation_status")
}

enum ShipmentStatus {
  shipping
  completed
  cancelled

  @@map("shipment_status")
}
